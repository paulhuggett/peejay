name: Coverity Scan
on: workflow_dispatch
permissions:
  contents: read

jobs:
  coverity:
    name: Coverity Scan
    runs-on: ubuntu-latest
    env:
      COVURL: scan.coverity.com
      OWNER: paulhuggett
      REPOSITORY: peejay
      BUILD_TOOL_DIR: "${{ github.workspace }}/coverity-build"

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@0080882f6c36860b6ba35c610c98ce87d4e2f26f # v2.10.2
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: 'True'

      - name: Get the Coverity Build Tool MD5
        id: get-cov-md5
        run: |
          mkdir -p "${{ env.BUILD_TOOL_DIR }}"
          PROJECT="${{ env.OWNER }}/${{ env.REPOSITORY }}"
          curl                                                          \
            --data-urlencode "md5=1"                                    \
            --data-urlencode "project=$PROJECT"                         \
            --data-urlencode "token=${{ secrets.COVERITY_SCAN_TOKEN }}" \
            --location                                                  \
            --output "${{ env.BUILD_TOOL_DIR }}/coverity_tool.md5"      \
            "https://${{ env.COVURL }}/download/linux64"
          MD5=$(cat "${{ env.BUILD_TOOL_DIR }}/coverity_tool.md5")
          echo "Coverity Tool MD5: $MD5"
          echo "md5=$MD5" >> "$GITHUB_OUTPUT"

      - name: Cache the Coverity Build Tool
        id: cache-build-tool
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          key: coverity-${{ runner.os }}-${{ steps.get-cov-md5.outputs.md5 }}
          path: '${{ env.BUILD_TOOL_DIR }}/coverity_tool.tgz'

      - name: Download the Coverity Build Tool
        if: ${{ steps.cache-build-tool.outputs.cache-hit != 'true' }}
        run: |
          echo ${{ steps.cache-build-tool.outputs.cache-hit }}
          mkdir -p "${{ env.BUILD_TOOL_DIR }}"
          PROJECT="${{ env.OWNER }}/${{ env.REPOSITORY }}"
          curl                                                          \
            --data-urlencode "project=$PROJECT"                         \
            --data-urlencode "token=${{ secrets.COVERITY_SCAN_TOKEN }}" \
            --location                                                  \
            --output "${{ env.BUILD_TOOL_DIR }}/coverity_tool.tgz"      \
            "https://${{ env.COVURL }}/download/linux64"

      - name: Unpack the Coverity Build Tool
        run: |
          cd "${{ env.BUILD_TOOL_DIR }}"
          tar xzf coverity_tool.tgz
          ls

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: Configure
        run: |
          rm -f -r ./build
          cmake                         \
            -S .                        \
            -B ./build                  \
            -D CMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          $(find "${{ env.BUILD_TOOL_DIR }}" -name cov-build) \
            --dir cov-int                                     \
            cmake --build ./build --config Release
          tail cov-int/build-log.txt

      - name: Compress Results
        run: |
          tar czvf ./peejay.tgz cov-int

      - name: Submit Results
        run: |
          VERSION=$(git rev-parse --short HEAD)
          PROJECT="${{ env.OWNER }}%2f${{ env.REPOSITORY }}"
          curl                                                \
            --form "token=${{ secrets.COVERITY_SCAN_TOKEN }}" \
            --form "email=${{ secrets.COVERITY_SCAN_EMAIL }}" \
            --form file=@./peejay.tgz                         \
            --form "version=$VERSION"                         \
            --form description=""                             \
            "https://${{ env.COVURL }}/builds?project=$PROJECT"
